import '@openzeppelin/hardhat-upgrades/dist/type-extensions';
import { ProposalResponse } from 'defender-admin-client';
import { ContractFactory, ethers } from 'ethers';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { PlatformSupportedOptions, UpgradeOptions } from '../utils';
export interface ExtendedProposalResponse extends ProposalResponse {
    txResponse?: ethers.providers.TransactionResponse;
}
export type ProposeUpgradeFunction = (proxyAddress: string, contractNameOrImplFactory: string | ContractFactory, opts?: ProposalOptions) => Promise<ExtendedProposalResponse>;
export interface ProposalOptions extends UpgradeOptions, PlatformSupportedOptions {
    title?: string;
    description?: string;
    proxyAdmin?: string;
    multisig?: string;
    multisigType?: 'Gnosis Safe' | 'Gnosis Multisig' | 'EOA';
    bytecodeVerificationReferenceUrl?: string;
}
export declare function makeProposeUpgrade(hre: HardhatRuntimeEnvironment, platformModule: boolean): ProposeUpgradeFunction;
//# sourceMappingURL=propose-upgrade.d.ts.map